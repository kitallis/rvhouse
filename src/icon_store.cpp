#include <fx.h>
#include <FXGIFIcon.h>
#include <FXJPGIcon.h>
#include <FXICOIcon.h>

#include <list>

#include <cstdarg>

#include "icon_store.h"

/* Generated by reswrap version 3.2.0 */
/* created by reswrap from file unknown.gif */
const static unsigned char _missing_icon_gif[]={
            0x47,0x49,0x46,0x38,0x39,0x61,0x20,0x00,0x20,0x00,0xe7,0x00,0x00,0x00,0x00,0x00,
            0x01,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05,0x05,0x06,
            0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x08,0x09,0x09,0x09,0x0a,0x0a,0x0a,0x0b,0x0b,
            0x0b,0x0c,0x0c,0x0c,0x0d,0x0d,0x0d,0x0e,0x0e,0x0e,0x0f,0x0f,0x0f,0x10,0x10,0x10,
            0x11,0x11,0x11,0x12,0x12,0x12,0x13,0x13,0x13,0x14,0x14,0x14,0x15,0x15,0x15,0x16,
            0x16,0x16,0x17,0x17,0x17,0x18,0x18,0x18,0x19,0x19,0x19,0x1a,0x1a,0x1a,0x1b,0x1b,
            0x1b,0x1c,0x1c,0x1c,0x1d,0x1d,0x1d,0x1e,0x1e,0x1e,0x1f,0x1f,0x1f,0x20,0x20,0x20,
            0x21,0x21,0x21,0x22,0x22,0x22,0x23,0x23,0x23,0x24,0x24,0x24,0x25,0x25,0x25,0x26,
            0x26,0x26,0x27,0x27,0x27,0x28,0x28,0x28,0x29,0x29,0x29,0x2a,0x2a,0x2a,0x2b,0x2b,
            0x2b,0x2c,0x2c,0x2c,0x2d,0x2d,0x2d,0x2e,0x2e,0x2e,0x2f,0x2f,0x2f,0x30,0x30,0x30,
            0x31,0x31,0x31,0x32,0x32,0x32,0x33,0x33,0x33,0x34,0x34,0x34,0x35,0x35,0x35,0x36,
            0x36,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3b,0x3b,
            0x3b,0x3c,0x3c,0x3c,0x3d,0x3d,0x3d,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x40,0x40,0x40,
            0x41,0x41,0x41,0x42,0x42,0x42,0x43,0x43,0x43,0x44,0x44,0x44,0x45,0x45,0x45,0x46,
            0x46,0x46,0x47,0x47,0x47,0x48,0x48,0x48,0x49,0x49,0x49,0x4a,0x4a,0x4a,0x4b,0x4b,
            0x4b,0x4c,0x4c,0x4c,0x4d,0x4d,0x4d,0x4e,0x4e,0x4e,0x4f,0x4f,0x4f,0x50,0x50,0x50,
            0x51,0x51,0x51,0x52,0x52,0x52,0x53,0x53,0x53,0x54,0x54,0x54,0x55,0x55,0x55,0x56,
            0x56,0x56,0x57,0x57,0x57,0x58,0x58,0x58,0x59,0x59,0x59,0x5a,0x5a,0x5a,0x5b,0x5b,
            0x5b,0x5c,0x5c,0x5c,0x5d,0x5d,0x5d,0x5e,0x5e,0x5e,0x5f,0x5f,0x5f,0x60,0x60,0x60,
            0x61,0x61,0x61,0x62,0x62,0x62,0x63,0x63,0x63,0x64,0x64,0x64,0x65,0x65,0x65,0x66,
            0x66,0x66,0x67,0x67,0x67,0x68,0x68,0x68,0x69,0x69,0x69,0x6a,0x6a,0x6a,0x6b,0x6b,
            0x6b,0x6c,0x6c,0x6c,0x6d,0x6d,0x6d,0x6e,0x6e,0x6e,0x6f,0x6f,0x6f,0x70,0x70,0x70,
            0x71,0x71,0x71,0x72,0x72,0x72,0x73,0x73,0x73,0x74,0x74,0x74,0x75,0x75,0x75,0x76,
            0x76,0x76,0x77,0x77,0x77,0x78,0x78,0x78,0x79,0x79,0x79,0x7a,0x7a,0x7a,0x7b,0x7b,
            0x7b,0x7c,0x7c,0x7c,0x7d,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x80,0x80,0x80,
            0x81,0x81,0x81,0x82,0x82,0x82,0x83,0x83,0x83,0x84,0x84,0x84,0x85,0x85,0x85,0x86,
            0x86,0x86,0x87,0x87,0x87,0x88,0x88,0x88,0x89,0x89,0x89,0x8a,0x8a,0x8a,0x8b,0x8b,
            0x8b,0x8c,0x8c,0x8c,0x8d,0x8d,0x8d,0x8e,0x8e,0x8e,0x8f,0x8f,0x8f,0x90,0x90,0x90,
            0x91,0x91,0x91,0x92,0x92,0x92,0x93,0x93,0x93,0x94,0x94,0x94,0x95,0x95,0x95,0x96,
            0x96,0x96,0x97,0x97,0x97,0x98,0x98,0x98,0x99,0x99,0x99,0x9a,0x9a,0x9a,0x9b,0x9b,
            0x9b,0x9c,0x9c,0x9c,0x9d,0x9d,0x9d,0x9e,0x9e,0x9e,0x9f,0x9f,0x9f,0xa0,0xa0,0xa0,
            0xa1,0xa1,0xa1,0xa2,0xa2,0xa2,0xa3,0xa3,0xa3,0xa4,0xa4,0xa4,0xa5,0xa5,0xa5,0xa6,
            0xa6,0xa6,0xa7,0xa7,0xa7,0xa8,0xa8,0xa8,0xa9,0xa9,0xa9,0xaa,0xaa,0xaa,0xab,0xab,
            0xab,0xac,0xac,0xac,0xad,0xad,0xad,0xae,0xae,0xae,0xaf,0xaf,0xaf,0xb0,0xb0,0xb0,
            0xb1,0xb1,0xb1,0xb2,0xb2,0xb2,0xb3,0xb3,0xb3,0xb4,0xb4,0xb4,0xb5,0xb5,0xb5,0xb6,
            0xb6,0xb6,0xb7,0xb7,0xb7,0xb8,0xb8,0xb8,0xb9,0xb9,0xb9,0xba,0xba,0xba,0xbb,0xbb,
            0xbb,0xbc,0xbc,0xbc,0xbd,0xbd,0xbd,0xbe,0xbe,0xbe,0xbf,0xbf,0xbf,0xc0,0xc0,0xc0,
            0xc1,0xc1,0xc1,0xc2,0xc2,0xc2,0xc3,0xc3,0xc3,0xc4,0xc4,0xc4,0xc5,0xc5,0xc5,0xc6,
            0xc6,0xc6,0xc7,0xc7,0xc7,0xc8,0xc8,0xc8,0xc9,0xc9,0xc9,0xca,0xca,0xca,0xcb,0xcb,
            0xcb,0xcc,0xcc,0xcc,0xcd,0xcd,0xcd,0xce,0xce,0xce,0xcf,0xcf,0xcf,0xd0,0xd0,0xd0,
            0xd1,0xd1,0xd1,0xd2,0xd2,0xd2,0xd3,0xd3,0xd3,0xd4,0xd4,0xd4,0xd5,0xd5,0xd5,0xd6,
            0xd6,0xd6,0xd7,0xd7,0xd7,0xd8,0xd8,0xd8,0xd9,0xd9,0xd9,0xda,0xda,0xda,0xdb,0xdb,
            0xdb,0xdc,0xdc,0xdc,0xdd,0xdd,0xdd,0xde,0xde,0xde,0xdf,0xdf,0xdf,0xe0,0xe0,0xe0,
            0xe1,0xe1,0xe1,0xe2,0xe2,0xe2,0xe3,0xe3,0xe3,0xe4,0xe4,0xe4,0xe5,0xe5,0xe5,0xe6,
            0xe6,0xe6,0xe7,0xe7,0xe7,0xe8,0xe8,0xe8,0xe9,0xe9,0xe9,0xea,0xea,0xea,0xeb,0xeb,
            0xeb,0xec,0xec,0xec,0xed,0xed,0xed,0xee,0xee,0xee,0xef,0xef,0xef,0xf0,0xf0,0xf0,
            0xf1,0xf1,0xf1,0xf2,0xf2,0xf2,0xf3,0xf3,0xf3,0xf4,0xf4,0xf4,0xf5,0xf5,0xf5,0xf6,
            0xf6,0xf6,0xf7,0xf7,0xf7,0xf8,0xf8,0xf8,0xf9,0xf9,0xf9,0xfa,0xfa,0xfa,0xfb,0xfb,
            0xfb,0xfc,0xfc,0xfc,0xfd,0xfd,0xfd,0xfe,0xfe,0xfe,0xff,0xff,0xff,0x21,0xf9,0x04,
            0x01,0x0a,0x00,0xff,0x00,0x2c,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x00,0x08,
            0x6b,0x00,0xff,0x09,0x1c,0x48,0xb0,0xa0,0xc1,0x83,0x08,0x13,0x2a,0x5c,0xc8,0xb0,
            0xa1,0xc3,0x87,0x10,0x0d,0x02,0x98,0x48,0x31,0xa2,0x44,0x8a,0x18,0x2b,0x5a,0xfc,
            0x97,0xb1,0xe3,0x44,0x8b,0x1e,0x3d,0x46,0xec,0x58,0x10,0xe3,0x48,0x8d,0x17,0x01,
            0x9c,0xfc,0x78,0x10,0xe5,0x43,0x96,0x29,0x55,0x6e,0x6c,0x69,0x72,0x66,0xc9,0x8c,
            0x36,0x07,0x8a,0xcc,0xc9,0x91,0x24,0x4f,0x9f,0x3f,0x71,0xf2,0x14,0x58,0x73,0x68,
            0x4f,0x98,0x46,0x8b,0x26,0x75,0x39,0x54,0x69,0x53,0xa6,0x41,0x91,0x2e,0x35,0x4a,
            0x55,0xa1,0xd3,0xa8,0x32,0xa9,0x5e,0x0d,0x5a,0x95,0x67,0x40,0x00,0x3b
        };

FXIcon *
icon_store::_icon_factory(const std::string &file) {
    // TODO recognize by file extension or something
    FXString ext = FXFile::extension(file.c_str()).lower();
    if (ext == "ico")
        return new FXICOIcon(_app);
    if (ext == "gif")
        return new FXGIFIcon(_app);
    if (ext == "jpg" || ext == "jpeg")
        return new FXJPGIcon(_app);

    ACE_DEBUG((LM_DEBUG, "icon_store::_icon_factory could not create icon for "
               "extension '%s' from file '%s'\n", ext.text(), file.c_str()));
    return NULL;
}

icon_store::icon_store(FXApp *app) : _app(app) {
    ACE_DEBUG((LM_DEBUG, "icon_store::ctor\n"));
    _missing_icon = new FXGIFIcon(_app, _missing_icon_gif);
}

icon_store::~icon_store() {
    ACE_DEBUG((LM_DEBUG, "icon_store::dtor\n"));
    // Delete icon resources
    _key_icon_map_type::iterator i = _key_icon_map.begin();
    for (; i != _key_icon_map.end(); i++) {
        delete i->second;
    }

    delete _missing_icon;
}

bool
icon_store::load(const char *key, const std::string &file) {
    ACE_DEBUG((LM_DEBUG, "icon_store::load key %s file %s\n",
               key, file.c_str()));

    FXIcon *icon = _icon_factory(file);
    if (icon == NULL) {
        ACE_ERROR((LM_ERROR,
                   "icon_store::load key '%s' file %s, could not "
                   "find a handler for the type\n",
                   key, file.c_str()));
        return false;
    }

    FXFileStream stream;
    if (stream.open(file.c_str(), FXStreamLoad)) {
        icon->loadPixels(stream);
        stream.close();
        icon->create();

        _key_icon_map[key] = icon;
    } else {
        ACE_ERROR((LM_ERROR, "icon_store::load failed to load image file %s\n",
                   file.c_str()));
        return false;
    }

    return true;
}

FXIcon *
icon_store::get(const char *key) {
    _key_icon_map_type::iterator i = _key_icon_map.find(key);
    if (i == _key_icon_map.end()) return _missing_icon;
    return i->second;
}

void
icon_store::scan_from_dir(const std::string dir, const char *file_base_name, ...)
{
    ACE_DEBUG((LM_DEBUG, "icon_store.:scan_from_dir %s\n", dir.c_str()));
    // Collect arguments into a map for fast access
    typedef std::map<std::string, bool> base_map_type;
    base_map_type base_file_names;

    va_list argptr;
    va_start(argptr, file_base_name);
    const char *base = file_base_name;
    do {
        ACE_DEBUG((LM_DEBUG, "icon_store::scan_from_dir base name %s\n", base));
        base_file_names[base] = true;
        base = va_arg(argptr, const char *);
    } while (base != NULL);

    va_end(argptr);

    // Then find all the files matching one of the regexps and
    // try loading a corresponding icon resource for it
    FXString *filelist = NULL;
    FXint     files = FXFile::listFiles(filelist, dir.c_str(), "*", LIST_ALL_FILES);
    ACE_DEBUG((LM_DEBUG, "icon_store.:scan_from_dir %d files found\n", files));
    for (int file_ndx = 0; file_ndx < files; file_ndx++) {
        // Do not require the case of the filename to be exact (lower)
        FXString file       = filelist[file_ndx].lower();
        FXString file_noext = FXFile::stripExtension(file);

        ACE_DEBUG((LM_DEBUG, "icon_store::scan_from_dir inspecting file %s\n",
                   file.text()));

        if (base_file_names.find(file_noext.text()) !=
                base_file_names.end())
        {
            // Create the full file name path
            std::string path(dir);
            path += PATHSEP;
            path += file.text();

            this->load(file_noext.text(), path);
        }
    }
}
